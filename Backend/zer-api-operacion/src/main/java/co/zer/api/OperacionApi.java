/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package co.zer.api;

import co.zer.model.Registro;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-04-14T15:36:38.386Z[GMT]")
@Validated
public interface OperacionApi {

    Logger log = LoggerFactory.getLogger(OperacionApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "", description = "", tags={ "operacion", "apiGateway" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Información correctamente almacenada y disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo almacenar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.") })
    @RequestMapping(value = "/v1/operacion/confirmar/{cuenta}",
            produces = { "application/json" },
            method = RequestMethod.PUT)
    default ResponseEntity<Object> confirmarPago(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("cuenta") String cuenta, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "idPago", required = true) Long idPago, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "placa", required = true) String placa, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "fhliquidacion", required = true) String fhliquidacion, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "promotor", required = true) Long promotor) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={ "operacion", "apiGateway" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Información disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo procesar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.") })
    @RequestMapping(value = "/v1/operacion/alertas_prepago/{cuenta}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    default ResponseEntity<Object> getAlertasPrepagoZona(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("cuenta") String cuenta, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "zona", required = true) Long zona) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={ "operacion", "apiGateway" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Información disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo procesar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.") })
    @RequestMapping(value = "/v1/operacion/cartera_placa/{cuenta}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    default ResponseEntity<Object> getCarteraPlaca(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("cuenta") String cuenta, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "placa", required = true) String placa) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={ "operacion", "apiGateway" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Información disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo procesar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.") })
    @RequestMapping(value = "/v1/operacion/preliquidar_zona/{cuenta}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    default ResponseEntity<Object> getEstadoZona(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("cuenta") String cuenta, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "zona", required = true) Long zona) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={ "operacion", "apiGateway" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Información disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo procesar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.") })
    @RequestMapping(value = "/v1/operacion/ocupacion/{cuenta}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    default ResponseEntity<Object> getOcupacionZona(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("cuenta") String cuenta, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "zona", required = true) Long zona) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={ "operacion", "apiGateway" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Información disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo procesar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.") })
    @RequestMapping(value = "/v1/operacion/probar_online/{cuenta}/{valor_referencia}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    default ResponseEntity<Object> getProbarOnline(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("cuenta") String cuenta, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("valor_referencia") Long valorReferencia) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={ "operacion", "apiGateway" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Información disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo procesar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.") })
    @RequestMapping(value = "/v1/operacion/get_supera_limite_endeudamiento/{cuenta}/{promotor}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    default ResponseEntity<Object> getSuperaLimiteDeEndeudamiento(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("cuenta") String cuenta, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("promotor") Long promotor) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={ "operacion", "apiGateway" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Información disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo procesar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.") })
    @RequestMapping(value = "/v1/operacion/ultimos_movimientos_hoy/{cuenta}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    default ResponseEntity<Object> getUltimosMovimientosHoy(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("cuenta") String cuenta, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "placa", required = true) String placa) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={ "operacion", "apiGateway" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Información correctamente almacenada y disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo almacenar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.") })
    @RequestMapping(value = "/v1/operacion/ingresar/{cuenta}",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    default ResponseEntity<Object> ingresarVehiculo(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("cuenta") String cuenta, @Parameter(in = ParameterIn.DEFAULT, description = "Registro", required=true, schema=@Schema()) @Valid @RequestBody Registro body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={ "operacion", "apiGateway" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Información correctamente almacenada y disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo almacenar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.") })
    @RequestMapping(value = "/v1/operacion/preliquidar_cuenta/{cuenta}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    default ResponseEntity<Object> liquidarVehiculo(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("cuenta") String cuenta, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "idCuenta", required = true) Long idCuenta, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "placa", required = true) String placa) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={ "operacion", "apiGateway" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Información correctamente almacenada y disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo almacenar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.") })
    @RequestMapping(value = "/v1/operacion/extemporaneo/{cuenta}",
            produces = { "application/json" },
            method = RequestMethod.PUT)
    default ResponseEntity<Object> pagoExtemporaneo(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("cuenta") String cuenta, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "idPago", required = true) Long idPago, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "promotor", required = true) Long promotor, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "placa", required = true) String placa) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={ "operacion", "apiGateway" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Información correctamente almacenada y disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo almacenar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.") })
    @RequestMapping(value = "/v1/operacion/extemporaneo_from_web/{cuenta}",
            produces = { "application/json" },
            method = RequestMethod.PUT)
    default ResponseEntity<Object> pagoExtemporaneoFromWEB(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("cuenta") String cuenta, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "idPago", required = true) Long idPago, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "placa", required = true) String placa) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={ "operacion", "apiGateway" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Información correctamente almacenada y disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo almacenar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.") })
    @RequestMapping(value = "/v1/operacion/prepago/{cuenta}",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    default ResponseEntity<Object> registrarPrepago(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("cuenta") String cuenta, @Parameter(in = ParameterIn.DEFAULT, description = "Registro", required=true, schema=@Schema()) @Valid @RequestBody Registro body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={ "operacion", "apiGateway" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Información correctamente almacenada y disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo almacenar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.") })
    @RequestMapping(value = "/v1/operacion/reportar/{cuenta}",
            produces = { "application/json" },
            method = RequestMethod.PUT)
    default ResponseEntity<Object> reportarVehiculo(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("cuenta") String cuenta, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "idCuenta", required = true) Long idCuenta, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "promotor", required = true) Long promotor, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "placa", required = true) String placa) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={ "operacion", "apiGateway" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Información correctamente almacenada y disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo almacenar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.") })
    @RequestMapping(value = "/v1/operacion/salio_prepago/{cuenta}",
            produces = { "application/json" },
            method = RequestMethod.PUT)
    default ResponseEntity<Object> salioPrepago(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("cuenta") String cuenta, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "idPago", required = true) Long idPago) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    @Operation(summary = "", description = "", tags = {"operacion", "apiGateway"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Información correctamente almacenada y disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo almacenar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.")})
    @RequestMapping(value = "/v1/operacion/obtener_total_recaudado/{cuenta}/{idPromotor}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<Object> obtenerTotalRecaudado(@Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("cuenta") String cuenta, @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("idPromotor") Long idPromotor) {
        if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    @Operation(summary = "", description = "", tags = {"operacion", "apiGateway"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Información correctamente almacenada y disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo almacenar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.")})
    @RequestMapping(value = "/v1/operacion/esta_bloqueado/{cuenta}/{promotor}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<Object> estaBloqueado(@Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("cuenta") String cuenta, @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("promotor") Long promotor) {
        if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    @Operation(summary = "", description = "", tags = {"operacion", "apiGateway"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Información correctamente almacenada y disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo almacenar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.")})
    @RequestMapping(value = "/v1/operacion/bloquear_promotor/{cuenta}/{promotor}",
            produces = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<Object> bloquearPromotor(@Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("cuenta") String cuenta, @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("promotor") Long promotor) {
        if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    @Operation(summary = "", description = "", tags = {"operacion", "apiGateway"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Información correctamente almacenada y disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo almacenar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.")})
    @RequestMapping(value = "/v1/operacion/desbloquear_promotor/{cuenta}/{promotor}/{supervisor}",
            produces = {"application/json"},
            method = RequestMethod.PUT)
    default ResponseEntity<Object> desbloquearPromotor(@Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("cuenta") String cuenta, @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("promotor") Long promotor, @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("supervisor") Long supervisor) {
        if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    @Operation(summary = "", description = "", tags = {"operacion", "apiGateway"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Información correctamente almacenada y disponible.", content = @Content(schema = @Schema(implementation = Object.class))),

            @ApiResponse(responseCode = "400", description = "No se pudo almacenar por error en los datos."),

            @ApiResponse(responseCode = "401", description = "No está autorizado.")})
    @RequestMapping(value = "/v1/operacion/listar_bloqueados/{cuenta}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<Object> listarBloqueados(@Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("cuenta") String cuenta) {
        if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperacionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}


