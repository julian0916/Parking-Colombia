/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.23).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package co.zer.api;

import co.zer.model.DiffRespuesta;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-12-29T15:58:13.089Z[GMT]")
public interface AccesoApi {

    Logger log = LoggerFactory.getLogger(AccesoApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "Continua con el proceso de autenticación", description = "Solicita al servidor la autenticación de los datos suministrados, los cuales se pasan completando el proceso diff", tags={ "acceso", "apiGateway" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Se ha autenticado correctamente.", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Object.class)))),
        
        @ApiResponse(responseCode = "401", description = "No está autorizado.") })
    @RequestMapping(value = "/v1/acceso/auth",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Object>> getAuth(@NotNull @Parameter(in = ParameterIn.QUERY, description = "id para completar la solicitud de sesion" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "idSolicitud", required = true) String idSolicitud, @NotNull @Parameter(in = ParameterIn.QUERY, description = "valor de A para el diff" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "A", required = true) String A, @NotNull @Parameter(in = ParameterIn.QUERY, description = "contiene la información encriptada con los datos necesarios en la autenticación." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "contentAuth", required = true) String contentAuth) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ { }, { } ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AccesoApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Inicia el proceso de autenticación", description = "Solicita al servidor el incio de un proceso de autenticación", tags={ "acceso", "apiGateway" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Proceso de autenticación iniciado.", content = @Content(schema = @Schema(implementation = DiffRespuesta.class))) })
    @RequestMapping(value = "/v1/acceso/authDiff",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<DiffRespuesta> getAuthDiff() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"p\" : \"p\",\n  \"B\" : \"B\",\n  \"g\" : \"g\",\n  \"idSolicitud\" : \"idSolicitud\"\n}", DiffRespuesta.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AccesoApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={ "acceso", "apiGateway" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Proceso completado exitosamente.", content = @Content(schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v1/acceso/salir/{cuenta}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Object> salirDelaSesion(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("cuenta") String cuenta) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AccesoApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

